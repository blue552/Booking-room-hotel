class BookingService {
    constructor() {
        // Cấu hình URL của các microservices khác
        this.userServiceUrl = process.env.USER_SERVICE_URL || 'http://user_service:3001';
        this.roomServiceUrl = process.env.ROOM_SERVICE_URL || 'http://room_service:3002';
    }

    // === INTER-SERVICE COMMUNICATION ===
    
    // Lấy thông tin user từ user-service
    async getUserById(userId) {
        try {
            const response = await axios.get(`${this.userServiceUrl}/users/${userId}`);
            return response.data;                      // Trả về data user
        } catch (error) {
            console.error('Error fetching user:', error.message);
            return null;                               // Trả về null nếu lỗi
        }
    }

    // Lấy thông tin room từ room-service  
    async getRoomById(roomId) {
        try {
            const response = await axios.get(`${this.roomServiceUrl}/rooms/${roomId}`);
            return response.data;                      // Trả về data room
        } catch (error) {
            console.error('Error fetching room:', error.message);
            return null;                               // Trả về null nếu lỗi
        }
    }

    // === BUSINESS LOGIC ===
    
    // Tạo booking với validation đầy đủ
    async createBooking(bookingData) {
        const { roomId, userId } = bookingData;

        // STEP 1: Validate user tồn tại
        const user = await this.getUserById(userId);
        if (!user) {
            throw new Error('User not found');         // Ném lỗi nếu user không tồn tại
        }

        // STEP 2: Validate room tồn tại và available
        const room = await this.getRoomById(roomId);
        if (!room) {
            throw new Error('Room not found');         // Ném lỗi nếu room không tồn tại
        }
        if (room.status !== 'available') {
            throw new Error('Room is not available');  // Ném lỗi nếu room không available
        }

        // STEP 3: Tính toán tổng giá tiền
        const checkIn = new Date(bookingData.checkIn);  // Parse ngày check-in
        const checkOut = new Date(bookingData.checkOut); // Parse ngày check-out
        
        // Tính số đêm ở (làm tròn lên)
        const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
        const totalPrice = room.price * nights;        // Tổng giá = giá phòng × số đêm

        // STEP 4: Tạo booking trong database
        const booking = await Booking.create({
            ...bookingData,                            // Spread booking data
            totalPrice                                 // Thêm tổng giá đã tính
        });

        return booking;                                // Trả về booking đã tạo
    }

    // === DATA AGGREGATION ===
    
    // Lấy booking kèm chi tiết user và room
    async getBookingWithDetails(bookingId) {
        // STEP 1: Lấy booking từ database
        const booking = await Booking.findByPk(bookingId);
        if (!booking) {
            return null;                               // Trả về null nếu không tìm thấy
        }

        // STEP 2: Parallel fetch user và room data
        const [user, room] = await Promise.all([      // Chạy song song để tối ưu performance
            this.getUserById(booking.userId),          // Fetch user info
            this.getRoomById(booking.roomId)           // Fetch room info
        ]);

        // STEP 3: Kết hợp data
        return {
            ...booking.toJSON(),                       // Convert Sequelize object thành plain object
            user,                                      // Thêm user data
            room                                       // Thêm room data
        };
    }

    // Lấy tất cả bookings của một user
    async getUserBookings(userId) {
        // STEP 1: Lấy tất cả bookings của user
        const bookings = await Booking.findAll({
            where: { userId }                          // Filter theo userId
        });

        // STEP 2: Thêm room details cho mỗi booking
        const bookingsWithDetails = await Promise.all(
            bookings.map(async (booking) => {         // Map qua từng booking
                const room = await this.getRoomById(booking.roomId); // Fetch room info
                return {
                    ...booking.toJSON(),               // Convert thành plain object
                    room                               // Thêm room data
                };
            })
        );

        return bookingsWithDetails;                    // Trả về array bookings với room details
    }
}

// Export singleton instance
module.exports = new BookingService();                // Export instance, không phải class
// === VALIDATION RULES ===
const bookingValidation = [
    body('roomId').isInt().withMessage('Room ID must be a number'),           // roomId phải là số
    body('checkIn').isISO8601().withMessage('Invalid check-in date'),         // checkIn phải là ISO date
    body('checkOut').isISO8601().withMessage('Invalid check-out date'),       // checkOut phải là ISO date  
    body('guests').isInt({ min: 1 }).withMessage('Number of guests must be at least 1'), // guests >= 1
    validate                                                                  // Apply validation middleware
];

// === CREATE BOOKING ENDPOINT ===
router.post('/', auth, bookingValidation, async (req, res, next) => {
    try {
        const { roomId, checkIn, checkOut, guests, specialRequests } = req.body;

        // STEP 1: Kiểm tra room có đang bị lock không
        const isLocked = await BookingLock.isLocked(roomId, checkIn, checkOut);
        if (isLocked) {
            return res.status(409).json({                             // 409 Conflict
                success: false,
                error: { message: 'Room is currently being booked by another user. Please try again in a few moments.' }
            });
        }

        // STEP 2: Kiểm tra room có available không
        const isAvailable = await RedisStore.isRoomAvailable(roomId, checkIn, checkOut);
        if (!isAvailable) {
            return res.status(400).json({                             // 400 Bad Request
                success: false,
                error: { message: 'Room is not available for selected dates' }
            });
        }

        // STEP 3: Tạo booking
        const booking = await RedisStore.createBooking({
            userId: req.user.id,                                      // Lấy từ auth middleware
            roomId,
            checkIn,
            checkOut,
            guests,
            specialRequests,
            status: 'confirmed'                                       // Mặc định confirmed
        });

        // STEP 4: Trả về response thành công
        res.status(201).json({                                        // 201 Created
            success: true,
            data: booking
        });
    } catch (error) {
        next(error);                                                  // Chuyển error cho error handler
    }
});

// === GET USER BOOKINGS ENDPOINT ===
router.get('/', auth, async (req, res, next) => {
    try {
        // Lấy tất cả bookings của user hiện tại
        const bookings = await RedisStore.getUserBookings(req.user.id);
        res.json({
            success: true,
            data: bookings                                            // Trả về array bookings
        });
    } catch (error) {
        next(error);
    }
});

// === GET SINGLE BOOKING ENDPOINT ===
router.get('/:id', auth, async (req, res, next) => {
    try {
        const booking = await RedisStore.getBooking(req.params.id);   // Lấy booking theo ID
        
        // Kiểm tra booking tồn tại và thuộc về user hiện tại
        if (!booking || booking.userId !== req.user.id) {
            return res.status(404).json({                             // 404 Not Found
                success: false,
                error: { message: 'Booking not found' }
            });
        }

        res.json({
            success: true,
            data: booking
        });
    } catch (error) {
        next(error);
    }
});

// === CANCEL BOOKING ENDPOINT ===
router.delete('/:id', auth, async (req, res, next) => {
    try {
        // STEP 1: Lấy booking
        const booking = await RedisStore.getBooking(req.params.id);
        if (!booking || booking.userId !== req.user.id) {
            return res.status(404).json({
                success: false,
                error: { message: 'Booking not found' }
            });
        }

        // STEP 2: Kiểm tra business rule - có thể cancel không
        const checkInDate = new Date(booking.checkIn);               // Parse check-in date
        const now = new Date();                                      // Thời gian hiện tại
        const hoursUntilCheckIn = (checkInDate - now) / (1000 * 60 * 60); // Tính số giờ còn lại

        if (hoursUntilCheckIn < 24) {                                // Nếu ít hơn 24 giờ
            return res.status(400).json({                            // 400 Bad Request
                success: false,
                error: { message: 'Cannot cancel booking less than 24 hours before check-in' }
            });
        }

        // STEP 3: Update status thành cancelled
        await RedisStore.updateBooking(req.params.id, { status: 'cancelled' });

        res.json({
            success: true,
            message: 'Booking cancelled successfully'
        });
    } catch (error) {
        next(error);
    }
});