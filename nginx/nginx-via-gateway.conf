# NGINX → API Gateway Pattern (Recommended)
events {
    worker_connections 1024;
}

http {
    # API Gateway Pool - correct container names
    upstream api_gateway_pool {
        # Use exact container name from docker-compose
        server api_gateway_main:3000 max_fails=3 fail_timeout=30s;
        # server api_gateway_2:3000 max_fails=3 fail_timeout=30s;
        
        # Load balancing method options:
        # least_conn;  # Route to gateway with fewest connections
        # ip_hash;     # Sticky sessions based on client IP
    }

    # Frontend service - DISABLED (Using Python server on host)
    # upstream frontend_service {
    #     server frontend_server:8080 max_fails=3 fail_timeout=30s;
    # }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        
        # Health check
        location /health {
            return 200 '{"status":"ok","service":"nginx-via-gateway","pattern":"nginx-to-gateway-to-services","frontend":"external-python-server"}';
            add_header Content-Type application/json;
        }

        # ALL API ROUTES → API Gateway (FIXED!)
        location /api/ {
            # Route API requests to API Gateway Pool
            proxy_pass http://api_gateway_pool;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # Body & request handling for API requests
            proxy_request_buffering on;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            client_max_body_size 10M;
            
            # Timeout & retry settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            
            # Headers để track routing
            add_header X-Routed-Via "nginx-to-api-gateway" always;
            add_header X-Gateway-Routed "true" always;
        }

        # Legacy Services Routes → API Gateway
        location /services/ {
            proxy_pass http://api_gateway_pool;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # Body & request handling
            proxy_request_buffering on;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            client_max_body_size 10M;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            
            add_header X-Routed-Via "nginx-to-api-gateway-legacy" always;
        }

        # Static Assets - DISABLED (Frontend runs on separate Python server)
        # location /assets/ {
        #     proxy_pass http://frontend_service/assets/;
        #     
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     
        #     # Cache static assets
        #     expires 1y;
        #     add_header Cache-Control "public, immutable";
        #     add_header X-Served-By "frontend-service";
        # }

        # Frontend Routes - DISABLED (Frontend runs on separate Python server)
        # Frontend accessible at: http://localhost:3000/UI/
        # location / {
        #     proxy_pass http://frontend_service/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     
        #     add_header X-Served-By "frontend-spa";
        # }

        # Default route for API-only mode
        location / {
            return 200 '{"message":"API-only mode - Frontend running on http://localhost:3000/UI/","backend":"http://localhost/api/","health":"http://localhost/health"}';
            add_header Content-Type application/json;
        }

        # Direct API Gateway access (for debugging)
        location /gateway/ {
            proxy_pass http://api_gateway_pool;
            rewrite ^/gateway/(.*) /$1 break;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header X-Debug-Mode "direct-gateway-access";
        }

        # Load balancing stats endpoint
        location /nginx-stats {
            return 200 '{"nginx":{"status":"healthy","upstreams":{"api_gateway_pool":"api_gateway_main:3000"},"routing":{"/api/*":"API Gateway Pool","/services/*":"API Gateway Pool","frontend":"External Python server (localhost:3000/UI/)"}}}';
            add_header Content-Type application/json;
        }
    }
}

# ==============================================
# REQUEST FLOW EXAMPLES (CORRECTED):
# ==============================================
# 
# 1. API Request:
# Client: POST /api/users/register
# NGINX: proxy → api_gateway_pool (api_gateway_main:3000)
# API Gateway: pathRewrite /api/users → ""
# API Gateway: proxy → user-service:3001/register
# 
# 2. Legacy API Request:
# Client: POST /services/user/register  
# NGINX: proxy → api_gateway_pool (api_gateway_main:3000)
# API Gateway: pathRewrite /services/user → ""
# API Gateway: proxy → user-service:3001/register
# 
# 3. Static Asset:
# Client: GET /assets/style.css
# NGINX: proxy → frontend:8080/assets/style.css (cached)
# 
# 4. SPA Route:
# Client: GET /dashboard
# NGINX: proxy → frontend:8080/ (SPA routing) 