# Nginx với Multiple Instances - DEMO
events {
    worker_connections 1024;
}

http {
    # SINGLE INSTANCE (hiện tại)
    upstream user_service_single {
        server user-service:3001;
    }

    # MULTIPLE INSTANCES (scale up)
    upstream user_service_multiple {
        # Round Robin Load Balancing
        server user-service-1:3001 weight=1;
        server user-service-2:3001 weight=1; 
        server user-service-3:3001 weight=1;
        
        # Health checks
        # server user-service-1:3001 max_fails=3 fail_timeout=30s;
        # server user-service-2:3001 max_fails=3 fail_timeout=30s;
        # server user-service-3:3001 max_fails=3 fail_timeout=30s;
    }

    # LOAD BALANCING ALGORITHMS
    upstream user_service_weighted {
        # Weighted Round Robin
        server user-service-1:3001 weight=3;  # Mạnh hơn, nhận nhiều request
        server user-service-2:3001 weight=2;  # Trung bình  
        server user-service-3:3001 weight=1;  # Yếu hơn, ít request
    }

    upstream user_service_ip_hash {
        # IP Hash - User cùng IP luôn vào cùng server
        ip_hash;
        server user-service-1:3001;
        server user-service-2:3001;
        server user-service-3:3001;
    }

    upstream user_service_least_conn {
        # Least Connections - Server ít connection nhất sẽ nhận request
        least_conn;
        server user-service-1:3001;
        server user-service-2:3001;
        server user-service-3:3001;
    }

    server {
        listen 80;
        
        # Route đến Multiple Instances
        location /api/users/ {
            proxy_pass http://user_service_multiple/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Load balancer sẽ tự động phân phối:
            # Request 1 → user-service-1:3001
            # Request 2 → user-service-2:3001  
            # Request 3 → user-service-3:3001
            # Request 4 → user-service-1:3001 (lặp lại)
        }
        
        # Health check endpoint
        location /health {
            return 200 '{"status":"ok","instances":"3"}';
            add_header Content-Type application/json;
        }
    }
} 