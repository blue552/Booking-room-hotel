version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: booking_postgres
    environment:
      POSTGRES_DB: booking_room_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - booking_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: booking_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - booking_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 3s
      retries: 5

  # Microservices
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - "3001:3001"
    environment:
      - USER_SERVICE_PORT=3001
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - JWT_EXPIRES_IN=86400
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    container_name: room_service
    ports:
      - "3002:3002"
    environment:
      - ROOM_SERVICE_PORT=3002
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - UPLOAD_PATH=./uploads
      - MAX_FILE_SIZE=5MB
      - REDIS_URL=redis://redis:6379
    volumes:
      - room_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build:
      context: .
      dockerfile: booking-service/Dockerfile
    container_name: booking_service
    ports:
      - "3003:3003"
    environment:
      - BOOKING_SERVICE_PORT=3003
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - JWT_EXPIRES_IN=86400
      - USER_SERVICE_URL=http://user-service:3001
      - ROOM_SERVICE_URL=http://room-service:3002
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "3000:3000"
    environment:
      - API_GATEWAY_PORT=3000
      - NODE_ENV=production
      - USER_SERVICE_URL=http://user-service:3001
      - ROOM_SERVICE_URL=http://room-service:3002
      - BOOKING_SERVICE_URL=http://booking-service:3003
    # Temporarily remove dependencies to test API Gateway
    # depends_on:
    #   user-service:
    #     condition: service_healthy
    #   room-service:
    #     condition: service_healthy
    #   booking-service:
    #     condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped

  # Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      api-gateway:
        condition: service_started
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Static File Server for Frontend
  frontend:
    build: .
    command: node static-server.js
    container_name: frontend_server
    ports:
      - "8080:8080"
    volumes:
      - ./UI:/app/UI
      - ./assets:/app/assets
    environment:
      - STATIC_PORT=8080
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  booking_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  room_uploads:
    driver: local
