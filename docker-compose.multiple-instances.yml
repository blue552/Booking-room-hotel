version: '3.8'

services:
  # Database Services (giữ nguyên)
  postgres:
    image: postgres:15-alpine
    container_name: booking_postgres
    environment:
      POSTGRES_DB: booking_room_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - booking_network

  redis:
    image: redis:7-alpine
    container_name: booking_redis
    ports:
      - "6379:6379"
    networks:
      - booking_network

  # MULTIPLE INSTANCES: User Service
  user-service-1:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service_1
    ports:
      - "3001:3001"
    environment:
      - USER_SERVICE_PORT=3001
      - NODE_ENV=production
      - INSTANCE_ID=user-service-1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - booking_network
    restart: unless-stopped

  user-service-2:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service_2
    ports:
      - "3004:3001"  # Port khác nhau
    environment:
      - USER_SERVICE_PORT=3001
      - NODE_ENV=production
      - INSTANCE_ID=user-service-2  # ID để phân biệt
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - booking_network
    restart: unless-stopped

  user-service-3:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service_3
    ports:
      - "3005:3001"  # Port khác nhau
    environment:
      - USER_SERVICE_PORT=3001
      - NODE_ENV=production
      - INSTANCE_ID=user-service-3  # ID để phân biệt
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - booking_network
    restart: unless-stopped

  # MULTIPLE INSTANCES: Room Service
  room-service-1:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    container_name: room_service_1
    ports:
      - "3002:3002"
    environment:
      - ROOM_SERVICE_PORT=3002
      - INSTANCE_ID=room-service-1
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - booking_network
    restart: unless-stopped

  room-service-2:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    container_name: room_service_2
    ports:
      - "3006:3002"  # Port khác
    environment:
      - ROOM_SERVICE_PORT=3002
      - INSTANCE_ID=room-service-2
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - booking_network
    restart: unless-stopped

  # Load Balancer với Multiple Instances
  nginx-lb:
    image: nginx:alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-multiple-instances.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service-1
      - user-service-2
      - user-service-3
      - room-service-1
      - room-service-2
    networks:
      - booking_network
    restart: unless-stopped

networks:
  booking_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local 