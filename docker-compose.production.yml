version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: booking_postgres
    environment:
      POSTGRES_DB: booking_room_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"  # Exposed for development/debugging
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - booking_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: booking_redis
    ports:
      - "6379:6379"  # Exposed for development/debugging
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - booking_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 3s
      retries: 5

  # ==============================================
  # BACKEND MICROSERVICES (INTERNAL ONLY)
  # No external ports - only accessible via API Gateway
  # ==============================================

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service
    # NO EXTERNAL PORTS - internal network only
    environment:
      - USER_SERVICE_PORT=3001
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    container_name: room_service
    # NO EXTERNAL PORTS
    environment:
      - ROOM_SERVICE_PORT=3002
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - UPLOAD_PATH=./uploads
      - MAX_FILE_SIZE=5MB
      - REDIS_URL=redis://redis:6379
    volumes:
      - room_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build:
      context: .
      dockerfile: booking-service/Dockerfile
    container_name: booking_service
    # NO EXTERNAL PORTS
    environment:
      - BOOKING_SERVICE_PORT=3003
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=booking_room_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=H0t3l_B00k1ng_S3cr3t_K3y_2024!
      - USER_SERVICE_URL=http://user-service:3001
      - ROOM_SERVICE_URL=http://room-service:3002
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # API GATEWAY LAYER (SCALABLE)
  # ==============================================

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api_gateway_main
    # NO EXTERNAL PORTS - only accessible via NGINX
    environment:
      - API_GATEWAY_PORT=3000
      - NODE_ENV=production
      - INSTANCE_ID=api-gateway-main
      - USER_SERVICE_URL=http://user-service:3001
      - ROOM_SERVICE_URL=http://room-service:3002
      - BOOKING_SERVICE_URL=http://booking-service:3003
    depends_on:
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Additional API Gateway instance for scaling
  api-gateway-2:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api_gateway_2
    environment:
      - API_GATEWAY_PORT=3000
      - NODE_ENV=production
      - INSTANCE_ID=api-gateway-2
      - USER_SERVICE_URL=http://user-service:3001
      - ROOM_SERVICE_URL=http://room-service:3002
      - BOOKING_SERVICE_URL=http://booking-service:3003
    depends_on:
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - scale  # Only start when scaling is needed

  # ==============================================
  # NGINX LOAD BALANCER (ENTRY POINT)
  # ==============================================

  nginx-lb:
    image: nginx:alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80"   # ONLY EXTERNAL PORT
      - "443:443" # For HTTPS (future)
    volumes:
      - ./nginx/nginx-via-gateway.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx  # Log persistence
    depends_on:
      api-gateway:
        condition: service_healthy
      # frontend:
      #   condition: service_healthy  # Temporarily disabled
    networks:
      - booking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # FRONTEND STATIC SERVER (DISABLED - Using Python server)
  # ==============================================

  # frontend:
  #   build: .
  #   command: node static-server.js
  #   container_name: frontend_server
  #   # NO EXTERNAL PORTS - only via NGINX
  #   environment:
  #     - STATIC_PORT=8080
  #     - NODE_ENV=production
  #   volumes:
  #     - ./UI:/app/UI
  #     - ./assets:/app/assets
  #   networks:
  #     - booking_network
  #   restart: unless-stopped
  #   # healthcheck disabled temporarily
  #   # healthcheck:
  #   #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
  #   #   interval: 30s
  #   #   timeout: 10s
  #   #   retries: 3

networks:
  booking_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  room_uploads:
    driver: local

# ==============================================
# ARCHITECTURE SUMMARY:
# ==============================================
# 
# 🌍 Client Request
#         ↓
# ⚖️ NGINX Load Balancer (Port 80) - Entry Point
#         ↓ Route /api/* requests 
# 🚪 API Gateway Pool (Internal) - Service Orchestration
#         ↓ Proxy to appropriate service
# 🏢 Microservices (Internal) - Business Logic
#         ↓ Access shared resources
# 💾 Data Layer (Postgres + Redis) - Persistence & Cache
#
# BENEFITS:
# ✅ Single Entry Point (Port 80)
# ✅ API Gateway handles service routing & authentication
# ✅ NGINX handles load balancing & static files
# ✅ Services are internal-only (security)
# ✅ Can scale API Gateway independently
# ✅ Clear separation of concerns 