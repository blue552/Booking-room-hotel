// === IMPORT DEPENDENCIES ===
const express = require('express');                    // Framework web cho Node.js
const { createProxyMiddleware } = require('http-proxy-middleware'); // Middleware để proxy requests
const cors = require('cors');                          // Middleware xử lý CORS (Cross-Origin Resource Sharing)
const path = require('path');                          // Module để xử lý đường dẫn file

// === APP CONFIGURATION ===
const app = express();                                 // Tạo instance Express app
const PORT = process.env.API_GATEWAY_PORT || 3000;    // Cổng chạy server (env variable hoặc 3000)
const INSTANCE_ID = process.env.INSTANCE_ID || 'api-gateway-default'; // ID instance cho load balancing

// === GLOBAL MIDDLEWARE ===
app.use(cors());                                       // Bật CORS cho tất cả routes

// === DEBUG MIDDLEWARE ===
app.use((req, res, next) => {                         // Middleware debug - chạy đầu tiên
    console.log(`🌐 [${INSTANCE_ID}] INCOMING: ${req.method} ${req.originalUrl}`); // Log mọi request đến
    next();                                            // Chuyển đến middleware tiếp theo
});

// === BODY PARSING MIDDLEWARE ===
app.use(express.json({ limit: '10mb' }));             // Parse JSON body, giới hạn 10MB
app.use(express.urlencoded({ extended: true, limit: '10mb' })); // Parse URL-encoded data

// === ROUTE-SPECIFIC DEBUG MIDDLEWARE ===
app.use('/api/users', (req, res, next) => {          // Debug cho user routes
    console.log(`🎯 [${INSTANCE_ID}] Matched /api/users route: ${req.method} ${req.originalUrl}`);
    console.log(`🎯 [${INSTANCE_ID}] Path after /api/users: ${req.url}`); // Path sau khi bỏ prefix
    next();
});

app.use('/services/user', (req, res, next) => {      // Debug cho user service routes
    console.log(`🎯 [${INSTANCE_ID}] Matched /services/user route: ${req.method} ${req.originalUrl}`);
    console.log(`🎯 [${INSTANCE_ID}] Path after /services/user: ${req.url}`);
    next();
});

// === REQUEST LOGGING MIDDLEWARE ===
app.use((req, res, next) => {                        // Middleware log chi tiết request
    const startTime = Date.now();                     // Thời gian bắt đầu request
    req.startTime = startTime;                        // Lưu start time vào request object

    // Log thông tin request
    console.log(`🚪 [${INSTANCE_ID}] ${new Date().toISOString()} - ${req.method} ${req.path}`);
    console.log(`📦 [${INSTANCE_ID}] Request body:`, req.body);     // Log request body
    console.log(`🛣️  [${INSTANCE_ID}] Original URL: ${req.originalUrl}`); // Log URL gốc
    console.log(`📍 [${INSTANCE_ID}] Headers:`, req.headers);      // Log tất cả headers

    // Log response khi hoàn thành
    res.on('finish', () => {                          // Event listener khi response xong
        const duration = Date.now() - startTime;      // Tính thời gian xử lý
        console.log(`📤 [${INSTANCE_ID}] ${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`);
    });

    next();
});

// === STATIC FILES (COMMENTED OUT) ===
// app.use('/assets', express.static(path.join(__dirname, 'assets'))); // Serve static assets
// app.use('/UI', express.static(path.join(__dirname, 'UI')));         // Serve UI files

// === HEALTH CHECK ENDPOINT ===
app.get('/health', (req, res) => {                   // Health check route
    res.status(200).json({                            // Trả về status 200 với thông tin
        status: 'OK',                                 // Trạng thái service
        service: 'api-gateway',                       // Tên service
        instance: INSTANCE_ID,                        // ID của instance
        timestamp: new Date().toISOString(),          // Thời gian hiện tại
        uptime: process.uptime(),                     // Thời gian chạy của process
        services: {                                   // Danh sách services backend
            userService: process.env.USER_SERVICE_URL || 'http://user-service:3001',
            roomService: process.env.ROOM_SERVICE_URL || 'http://room-service:3002',
            bookingService: process.env.BOOKING_SERVICE_URL || 'http://booking-service:3003'
        },
        architecture: 'nginx-to-gateway-to-services'  // Kiến trúc hệ thống
    });
});

// === USER SERVICE PROXY CONFIGURATION ===
const userServiceProxy = createProxyMiddleware({      // Tạo proxy cho user service
    target: process.env.USER_SERVICE_URL || 'http://user-service:3001', // URL đích
    changeOrigin: true,                               // Thay đổi origin header
    timeout: 30000,                                   // Timeout 30 giây
    proxyTimeout: 30000,                              // Proxy timeout 30 giây
    pathRewrite: {                                    // Rewrite đường dẫn
        '^/services/user': '',                        // Bỏ /services/user prefix
        '^/api/users': '',                            // Bỏ /api/users prefix
    },
    onProxyReq: (proxyReq, req, res) => {            // Callback khi proxy request
        console.log(`🔀 [${INSTANCE_ID}] User Service: ${req.method} ${req.originalUrl} → ${proxyReq.getHeader('host')}${proxyReq.path}`);

        // Forward essential headers
        if (req.get('content-type')) {                // Chuyển tiếp Content-Type header
            proxyReq.setHeader('content-type', req.get('content-type'));
        }
        if (req.get('authorization')) {               // Chuyển tiếp Authorization header
            proxyReq.setHeader('authorization', req.get('authorization'));
        }

        // Add tracing headers
        proxyReq.setHeader('X-Gateway-Instance', INSTANCE_ID);           // Header trace gateway
        proxyReq.setHeader('X-Request-ID', req.get('X-Request-ID') || `req-${Date.now()}`); // Header trace request

        // Handle request body for POST/PUT requests
        if (req.body && (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH')) {
            const bodyData = JSON.stringify(req.body); // Convert body thành JSON string
            console.log(`📦 [${INSTANCE_ID}] Forwarding body:`, bodyData);

            proxyReq.setHeader('Content-Type', 'application/json');      // Set Content-Type
            proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData)); // Set Content-Length
            proxyReq.write(bodyData);                 // Ghi body data vào proxy request
        }
    },
    onProxyRes: (proxyRes, req, res) => {            // Callback khi nhận response từ service
        console.log(`✅ [${INSTANCE_ID}] User Service Response: ${proxyRes.statusCode} for ${req.method} ${req.originalUrl} (${Date.now() - req.startTime}ms)`);

        // Add response headers for debugging
        res.setHeader('X-Proxied-By', `${INSTANCE_ID}-user-service`);    // Header trace proxy
        res.setHeader('X-Service-Response-Time', Date.now() - req.startTime); // Header response time

        if (proxyRes.statusCode >= 400) {             // Log nếu có lỗi
            console.log(`❌ [${INSTANCE_ID}] User Service Error: Status ${proxyRes.statusCode}`);
        }
    },
    onError: (err, req, res) => {                    // Callback khi có lỗi proxy
        console.error(`💥 [${INSTANCE_ID}] User Service Proxy Error:`, err.message);
        if (!res.headersSent) {                       // Nếu response chưa được gửi
            res.status(503).json({                    // Trả về lỗi 503 Service Unavailable
                success: false,
                message: 'User service temporarily unavailable',
                error: err.code || err.message,
                gateway: INSTANCE_ID
            });
        }
    }
});

// === ROOM SERVICE PROXY CONFIGURATION ===
const roomServiceProxy = createProxyMiddleware({      // Tương tự user service proxy
    target: process.env.ROOM_SERVICE_URL || 'http://room-service:3002',
    changeOrigin: true,
    timeout: 30000,
    proxyTimeout: 30000,
    pathRewrite: {
        '^/services/room': '/rooms',                  // Rewrite thành /rooms
        '^/api/rooms': '/rooms',
    },
    onProxyReq: (proxyReq, req, res) => {
        console.log(`🔀 [${INSTANCE_ID}] Room Service: ${req.method} ${req.originalUrl} → ${proxyReq.getHeader('host')}${proxyReq.path}`);

        if (req.get('content-type')) {
            proxyReq.setHeader('content-type', req.get('content-type'));
        }
        if (req.get('authorization')) {
            proxyReq.setHeader('authorization', req.get('authorization'));
        }

        proxyReq.setHeader('X-Gateway-Instance', INSTANCE_ID);
        proxyReq.setHeader('X-Request-ID', req.get('X-Request-ID') || `req-${Date.now()}`);

        if (req.body && (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH')) {
            const bodyData = JSON.stringify(req.body);
            proxyReq.setHeader('Content-Type', 'application/json');
            proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData));
            proxyReq.write(bodyData);
        }
    },
    onProxyRes: (proxyRes, req, res) => {
        console.log(`✅ [${INSTANCE_ID}] Room Service Response: ${proxyRes.statusCode} for ${req.method} ${req.originalUrl} (${Date.now() - req.startTime}ms)`);

        res.setHeader('X-Proxied-By', `${INSTANCE_ID}-room-service`);
        res.setHeader('X-Service-Response-Time', Date.now() - req.startTime);
    },
    onError: (err, req, res) => {
        console.error(`💥 [${INSTANCE_ID}] Room Service Proxy Error:`, err.message);
        if (!res.headersSent) {
            res.status(503).json({
                success: false,
                message: 'Room service unavailable',
                error: err.code || err.message,
                gateway: INSTANCE_ID
            });
        }
    }
});

// === BOOKING SERVICE PROXY CONFIGURATION ===
const bookingServiceProxy = createProxyMiddleware({   // Tương tự các proxy trên
    target: process.env.BOOKING_SERVICE_URL || 'http://booking-service:3003',
    changeOrigin: true,
    timeout: 30000,
    proxyTimeout: 30000,
    pathRewrite: {
        '^/bookings': '/bookings',                    // Giữ nguyên path /bookings
    },
    onProxyReq: (proxyReq, req, res) => {
        console.log(`🔀 [${INSTANCE_ID}] Booking Service: ${req.method} ${req.originalUrl} → ${proxyReq.getHeader('host')}${proxyReq.path}`);

        if (req.get('content-type')) {
            proxyReq.setHeader('content-type', req.get('content-type'));
        }
        if (req.get('authorization')) {
            proxyReq.setHeader('authorization', req.get('authorization'));
        }

        proxyReq.setHeader('X-Gateway-Instance', INSTANCE_ID);
        proxyReq.setHeader('X-Request-ID', req.get('X-Request-ID') || `req-${Date.now()}`);

        if (req.body && (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH')) {
            const bodyData = JSON.stringify(req.body);
            proxyReq.setHeader('Content-Type', 'application/json');
            proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData));
            proxyReq.write(bodyData);
        }
    },
    onProxyRes: (proxyRes, req, res) => {
        console.log(`✅ [${INSTANCE_ID}] Booking Service Response: ${proxyRes.statusCode} for ${req.method} ${req.originalUrl} (${Date.now() - req.startTime}ms)`);

        res.setHeader('X-Proxied-By', `${INSTANCE_ID}-booking-service`);
        res.setHeader('X-Service-Response-Time', Date.now() - req.startTime);
    },
    onError: (err, req, res) => {
        console.error(`💥 [${INSTANCE_ID}] Booking Service Proxy Error:`, err.message);
        if (!res.headersSent) {
            res.status(503).json({
                success: false,
                message: 'Booking service unavailable',
                error: err.code || err.message,
                gateway: INSTANCE_ID
            });
        }
    }
});

// === APPLY PROXY MIDDLEWARE ===
app.use('/services/user', userServiceProxy);          // Áp dụng user proxy cho /services/user
app.use('/api/users', userServiceProxy);              // Áp dụng user proxy cho /api/users
app.use('/services/room', roomServiceProxy);          // Áp dụng room proxy cho /services/room
app.use('/api/rooms', roomServiceProxy);              // Áp dụng room proxy cho /api/rooms
app.use('/bookings', bookingServiceProxy);            // Áp dụng booking proxy cho /bookings
app.use('/api/bookings', bookingServiceProxy);        // Áp dụng booking proxy cho /api/bookings

// === GATEWAY STATS ENDPOINT ===
app.get('/gateway-stats', (req, res) => {            // Endpoint thống kê gateway
    res.json({
        gateway: {
            instance: INSTANCE_ID,                     // ID instance
            uptime: process.uptime(),                  // Thời gian chạy
            memory: process.memoryUsage(),             // Thông tin memory
            timestamp: new Date().toISOString()       // Thời gian hiện tại
        },
        routing: {                                     // Bảng routing
            '/services/user/*': process.env.USER_SERVICE_URL || 'http://user-service:3001',
            '/api/users/*': process.env.USER_SERVICE_URL || 'http://user-service:3001',
            '/services/room/*': process.env.ROOM_SERVICE_URL || 'http://room-service:3002',
            '/api/rooms/*': process.env.ROOM_SERVICE_URL || 'http://room-service:3002',
            '/bookings/*': process.env.BOOKING_SERVICE_URL || 'http://booking-service:3003',
            '/api/bookings/*': process.env.BOOKING_SERVICE_URL || 'http://booking-service:3003'
        },
        architecture: 'nginx → api-gateway → microservices' // Kiến trúc hệ thống
    });
});

// === DEFAULT ROUTE ===
app.get('/', (req, res) => {                         // Route mặc định
    res.json({
        message: 'Room Booking API Gateway',          // Thông điệp chào mừng
        instance: INSTANCE_ID,                        // ID instance
        version: '2.0.0',                            // Version API
        architecture: 'nginx → api-gateway → microservices', // Kiến trúc
        endpoints: {                                  // Danh sách endpoints
            health: '/health',
            stats: '/gateway-stats',
            userService: '/services/user/* OR /api/users/*',
            roomService: '/services/room/* OR /api/rooms/*',
            bookingService: '/bookings/* OR /api/bookings/*'
        },
        documentation: {                              // API documentation
            users: {
                register: 'POST /api/users/register',
                login: 'POST /api/users/login',
                profile: 'GET /api/users/profile'
            },
            rooms: {
                list: 'GET /api/rooms',
                create: 'POST /api/rooms',
                details: 'GET /api/rooms/:id',
                update: 'PUT /api/rooms/:id',
                delete: 'DELETE /api/rooms/:id'
            },
            bookings: {
                list: 'GET /api/bookings',
                create: 'POST /api/bookings',
                details: 'GET /api/bookings/:id',
                update: 'PUT /api/bookings/:id',
                delete: 'DELETE /api/bookings/:id'
            }
        }
    });
});

// === CATCH-ALL ROUTE ===
app.use('*', (req, res) => {                         // Route bắt tất cả requests không match
    console.log(`❓ [${INSTANCE_ID}] Unknown route: ${req.method} ${req.originalUrl}`);
    res.status(404).json({                            // Trả về 404 Not Found
        success: false,
        message: `Route not found: ${req.method} ${req.originalUrl}`,
        gateway: INSTANCE_ID,
        availableRoutes: [                            // Danh sách routes có sẵn
            '/health',
            '/gateway-stats',
            '/api/users/*',
            '/api/rooms/*',
            '/api/bookings/*',
            '/services/user/*',
            '/services/room/*'
        ]
    });
});

// === START SERVER ===
app.listen(PORT, () => {                             // Khởi động server
    console.log(`🚪 API Gateway [${INSTANCE_ID}] running on port ${PORT}`);
    console.log(`🔗 Services Configuration:`);        // Log cấu hình services
    console.log(`   User Service: ${process.env.USER_SERVICE_URL || 'http://user-service:3001'}`);
    console.log(`   Room Service: ${process.env.ROOM_SERVICE_URL || 'http://room-service:3002'}`);
    console.log(`   Booking Service: ${process.env.BOOKING_SERVICE_URL || 'http://booking-service:3003'}`);
    console.log(`🏗️  Architecture: NGINX → API Gateway → Microservices`);
});

module.exports = app;                                 // Export app để testing